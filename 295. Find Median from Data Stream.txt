import heapq

class MedianFinder:

    def __init__(self):
        self.minHeap = []
        self.maxHeap = []

    def addNum(self, num: int) -> None:
        heapq.heappush(self.maxHeap, -num)

        if len(self.minHeap) + 1 < len(self.maxHeap):# 크기 차이가 2이상 나면 옮긴다
            heapq.heappush(self.minHeap, -heapq.heappop(self.maxHeap))
        
        if len(self.minHeap) > 0 and -self.maxHeap[0] > self.minHeap[0]:# maxHeap 큰거 > minHeap 작은거
            heapq.heappush(self.maxHeap, -heapq.heappop(self.minHeap))
            heapq.heappush(self.minHeap, -heapq.heappop(self.maxHeap))

    def findMedian(self) -> float:
        if (len(self.maxHeap) + len(self.minHeap)) % 2:
            return -self.maxHeap[0]
        else:
            return (-self.maxHeap[0] + self.minHeap[0])/2

# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()